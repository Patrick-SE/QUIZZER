QUIZZER/
|-- app/
|   |-- (tabs)/
|       |-- _layout
|       |-- edit-question.jsx
|       |-- edit-quiz.jsx
|       |-- multiple-choice.jsx
|       |-- question-type.jsx
|       |-- quiz-screen.jsx
|       |-- short-text.jsx
|       |-- top-tabs.jsx
|       |-- true-false.jsx
|   |-- components/
|       |-- ExamContent.jsx
|       |-- QuizzesContent.jsx
|       |-- SettingItem.jsx
|       |-- ToggleSetting.jsx
|   |-- index.jsx
|
|-- context/
|   |-- QuizContext.jsx
|
|-- styles/
|   |-- colors.js

-------------------
app(tabs)/_layout.jsx

import { Stack } from 'expo-router';
import { QuizProvider } from '../../context/QuizContext';

export default function Layout() {
  return (
    <QuizProvider>
      <Stack screenOptions={{ headerShown: false }} />
    </QuizProvider>
  );
}

------------
app/(tabs)/edit-question.jsx

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext'; // ✅ Import context

export default function EditQuestionScreen() {
  const { quizName, questionId } = useLocalSearchParams();
  const { quizQuestions, updateQuestion } = useQuiz(); // ✅ Get stored questions & update function
  const router = useRouter();

  const questionData = quizQuestions[quizName]?.find(q => q.id == questionId) || {};

  const [editedQuestion, setEditedQuestion] = useState(questionData.question || '');
  const [editedCorrectAnswer, setEditedCorrectAnswer] = useState(questionData.correctAnswer || '');

  const handleSave = () => {
    updateQuestion(quizName, questionId, editedQuestion, editedCorrectAnswer); // ✅ Update stored question
    router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } }); // ✅ Navigate back to quiz screen
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>{quizName}</Text>
        <TouchableOpacity onPress={handleSave}>
          <Ionicons name="save" size={24} color="#009688" />
        </TouchableOpacity>
      </View>

      <Text style={styles.label}>Question</Text>
      <TextInput 
        style={styles.input}
        value={editedQuestion}
        onChangeText={setEditedQuestion}
      />

      <Text style={styles.label}>Correct Answer</Text>
      <TextInput 
        style={styles.input}
        value={editedCorrectAnswer}
        onChangeText={setEditedCorrectAnswer}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  label: {
    fontSize: 16,
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 6,
    padding: 10,
  },
  questionItem: {
    padding: 16,
    borderBottomColor: '#eee',
    borderBottomWidth: 1,
  },
  questionText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  answerText: {
    fontSize: 14,
    color: '#666',
  },
});

-------------
app/(tabs)/edit-quiz.jsx

import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext'; // ✅ Import context

export default function EditQuiz() {
  const { name } = useLocalSearchParams();
  const [newName, setNewName] = useState(name || '');
  const router = useRouter();
  const { updateQuiz } = useQuiz(); // ✅ Use the update function from context

  const handleSave = () => {
    if (name && newName.trim()) {
      updateQuiz(name, newName.trim()); // ✅ Update quiz name in context
      
      // ✅ Ensure QUIZZES screen gets updated list
      router.push('/(tabs)/top-tabs');
      
      // ✅ Then replace quiz-screen with updated name
      router.replace({ pathname: '/(tabs)/quiz-screen', params: { name: newName.trim() } });
    }
  };  

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Edit Quiz</Text>
        <TouchableOpacity onPress={handleSave}>
          <Ionicons name="save" size={24} color="#009688" />
        </TouchableOpacity>
      </View>

      <Text style={styles.label}>Name</Text>
      <TextInput
        style={styles.input}
        value={newName}
        onChangeText={setNewName}
        placeholder="Enter new quiz name"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  label: {
    fontSize: 16,
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 6,
    padding: 10,
  },
});

--------
app/(tabs)/multiple-choice.jsx

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Modal } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext'; // ✅ Import context

export default function MultipleChoiceScreen() {

  const [errorMessage, setErrorMessage] = useState('');
  const [errorVisible, setErrorVisible] = useState(false);

  const { addQuestion } = useQuiz(); // ✅ Get function to store questions

  const { quizName, questionId } = useLocalSearchParams();
  const { quizQuestions, updateQuestion } = useQuiz();
  const router = useRouter();
  
  const questionData = quizQuestions[quizName]?.find(q => q.id === parseInt(questionId)) || {};
  
  const [question, setQuestion] = useState(questionData.question || '');
  const [correctAnswer, setCorrectAnswer] = useState(questionData.correctAnswer || '');
  const [wrongAnswer1, setWrongAnswer1] = useState(questionData.wrongAnswers?.[0] || '');
  const [wrongAnswer2, setWrongAnswer2] = useState(questionData.wrongAnswers?.[1] || '');
  const [wrongAnswer3, setWrongAnswer3] = useState(questionData.wrongAnswers?.[2] || '');  

  const handleSave = () => {
    if (!question.trim()) {
      setErrorMessage("Question can't be blank");
      setErrorVisible(true);
      return;
    }
  
    const formattedQuestion = question.trim().toLowerCase();
    const answers = [correctAnswer, wrongAnswer1, wrongAnswer2, wrongAnswer3]
      .map(ans => ans.trim().toLowerCase());
  
    if (answers.includes(formattedQuestion)) {
      setErrorMessage("The question and answers must be different.");
      setErrorVisible(true);
      return;
    }
  
    if (questionId) {
      // ✅ If question already exists, update it
      updateQuestion(
        quizName, 
        questionId, 
        question, 
        correctAnswer.trim(), 
        [wrongAnswer1.trim(), wrongAnswer2.trim(), wrongAnswer3.trim()], 
        '', // ✅ Short Text fields stay empty 
        ''
      );      
    } else {
      // ✅ Otherwise, create a new question
      addQuestion(quizName, {
        id: Date.now(), // Generate unique ID
        type: 'multiple-choice',
        question,
        correctAnswer,
        wrongAnswers: [wrongAnswer1, wrongAnswer2, wrongAnswer3]
      });
    }
  
    router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } });
  };  

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
      <TouchableOpacity onPress={() => router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } })}>
        <Ionicons name="arrow-back" size={24} color="black" />
      </TouchableOpacity>
        <Text style={styles.headerTitle}>Multiple Choice</Text>
        <TouchableOpacity onPress={handleSave}>
          <Ionicons name="save" size={24} color="#009688" />
        </TouchableOpacity>
      </View>

      {/* Question Input */}
      <Text style={styles.label}>Question</Text>
      <TextInput
        style={styles.input}
        value={question}
        onChangeText={setQuestion}
        placeholder="Enter question"
      />

      {/* Answer Inputs */}
      <Text style={styles.label}>Correct Answer</Text>
      <View style={styles.answerRow}>
        <TextInput
          style={styles.input}
          value={correctAnswer}
          onChangeText={setCorrectAnswer}
          placeholder="Enter correct answer"
        />
        <Ionicons name="checkmark-circle" size={24} color="green" />
      </View>

      <Text style={styles.label}>Wrong Answers</Text>
      {[
        [wrongAnswer1, setWrongAnswer1],
        [wrongAnswer2, setWrongAnswer2],
        [wrongAnswer3, setWrongAnswer3]
      ].map(([value, setter], index) => (
        <View key={index} style={styles.answerRow}>
          <TextInput
            style={styles.input}
            value={value}
            onChangeText={setter}
            placeholder={`Wrong answer ${index + 1}`}
          />
          <Ionicons name="close-circle" size={24} color="red" />
        </View>
      ))}

      {/* Modal for Validation */}
      <Modal visible={errorVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Validation Error</Text>
            <Text style={styles.modalText}>{errorMessage}</Text>
            <TouchableOpacity onPress={() => setErrorVisible(false)} style={styles.modalButton}>
              <Text style={styles.modalButtonText}>OK</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', padding: 20 },
  header: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 20 },
  headerTitle: { fontSize: 18, fontWeight: 'bold' },
  label: { fontSize: 16, marginBottom: 8 },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 6, padding: 10, flex: 1 },
  answerRow: { flexDirection: 'row', alignItems: 'center', marginBottom: 12 },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  modalContent: {
    backgroundColor: '#fff',
    width: '80%',
    padding: 20,
    borderRadius: 12,
    elevation: 10,
    alignItems: 'center',
  },
  modalTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 8,
  },
  modalText: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
    marginBottom: 12,
  },
  modalButton: {
    backgroundColor: '#009688',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 6,
  },
  modalButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

----------
app/(tabs)/question-type.jsx

import React, { useState } from 'react';
import { View, Text, TouchableOpacity, Modal, StyleSheet } from 'react-native';
import { useLocalSearchParams, useRouter } from 'expo-router';

export default function QuestionType() {
  const { quizName } = useLocalSearchParams();
  const router = useRouter();
  const [modalVisible, setModalVisible] = useState(true); // ✅ Modal now starts visible

  const handleSelect = (screen) => {
    setModalVisible(false); // ✅ Close modal before navigating
    setTimeout(() => router.push({ pathname: `/(tabs)/${screen}`, params: { quizName } }), 100);
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Text style={styles.backText}>← {quizName}</Text>
        </TouchableOpacity>
      </View>

      {/* Question Type Modal */}
      <Modal visible={modalVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Question Type</Text>

            <TouchableOpacity onPress={() => handleSelect('multiple-choice')}>
              <Text style={styles.option}>Multiple Choice</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => handleSelect('short-text')}>
              <Text style={styles.option}>Short Text</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => handleSelect('true-false')}>
              <Text style={styles.option}>True or False</Text>
            </TouchableOpacity>

            {/* Back Button */}
            <TouchableOpacity 
              onPress={() => {
                setModalVisible(false); // ✅ Hide modal
                router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } }); // ✅ Navigate to quiz screen
              }} 
              style={styles.backButton}
            >
              <Text style={styles.backText}>Back</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', padding: 20 },
  header: { marginBottom: 20 },
  backText: { fontSize: 16, color: '#009688', fontWeight: 'bold' },
  modalOverlay: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.3)' },
  modalContent: { backgroundColor: '#fff', width: '80%', padding: 20, borderRadius: 12, elevation: 10, alignItems: 'center' },
  modalTitle: { fontWeight: 'bold', fontSize: 16, marginBottom: 12, textAlign: 'center' },
  option: { paddingVertical: 12, fontSize: 16, color: '#009688', fontWeight: 'bold' },
  backButton: { marginTop: 20, paddingVertical: 10, width: '100%', alignItems: 'center', borderTopColor: '#ccc', borderTopWidth: 1 },
});

---------
app/(tabs)/quiz-screen.jsx

import { View, Text, TouchableOpacity, StyleSheet, Modal, FlatList } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useState, useEffect } from 'react';
import { useQuiz } from '../../context/QuizContext';

export default function QuizScreen() {
  const params = useLocalSearchParams();
  const router = useRouter();

  const [modalVisible, setModalVisible] = useState(false); // ✅ Modal now starts visible
  const [quizName, setQuizName] = useState(params.name || ''); // ✅ Store quiz name in state
  
  const { quizQuestions } = useQuiz(); // ✅ Get stored questions
  const questions = quizQuestions[quizName] || []; // ✅ Retrieve questions for this quiz

  useEffect(() => {
    if (params.name) {
      setQuizName(params.name); // ✅ Updates quizName if a new one is passed
    }
  }, [params.name]);

  const handleSelect = (screen) => {
    setModalVisible(false); // ✅ Close modal before navigating
    setTimeout(() => router.push({ pathname: `/(tabs)/${screen}`, params: { quizName } }), 100);
  };  

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.push({ pathname: '/(tabs)/top-tabs' })}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>{quizName}</Text>
        <View style={{ flexDirection: 'row' }}>
          <Ionicons name="pencil" size={24} color="black" style={{ marginRight: 16 }} />
          <Ionicons name="search" size={24} color="black" />
        </View>
      </View>

      {/* Question List Placeholder */}
      {questions.length === 0 ? (
        <Text style={styles.placeholder}>No questions yet</Text>
      ) : (
        <FlatList
          data={questions}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => (
            <TouchableOpacity 
              onPress={() => router.push({ 
                pathname: `/(tabs)/${item.type}`, // ✅ Redirect to correct question type screen
                params: { quizName, questionId: item.id } // ✅ Pass question ID for editing
              })}
            >
              <View style={[styles.questionItem, styles.questionSeparator]}>
                <Text style={styles.questionText}>{item.question}</Text>
                <Text style={[styles.answerText, styles.answerHighlight]}>
                  {item.type === 'short-text' 
                    ? item.answerEquals || item.answerContains || "No answer set" // ✅ Shows answer for Short Text
                    : item.correctAnswer // ✅ Shows answer for other types
                  }
                </Text>
              </View>
            </TouchableOpacity>
          )}
        />
      )}

      {/* Floating Action Button */}
      <TouchableOpacity style={styles.fab} onPress={() => setModalVisible(true)}>
        <Ionicons name="add" size={28} color="white" />
      </TouchableOpacity>

      {/* Modal for Question Type*/}
      <Modal visible={modalVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Choose a Question Type</Text>

            <TouchableOpacity onPress={() => handleSelect('multiple-choice')}>
              <Text style={styles.option}>Multiple Choice</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => handleSelect('short-text')}>
              <Text style={styles.option}>Short Text</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => handleSelect('true-false')}>
              <Text style={styles.option}>True or False</Text>
            </TouchableOpacity>

            {/* Back Button to Close Modal */}
            <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.backButton}>
              <Text style={styles.backText}>Back</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

    </View>


  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  fab: {
    position: 'absolute',
    bottom: 25,
    right: 25,
    backgroundColor: '#009688',
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  placeholder: {
    marginTop: 50,
    textAlign: 'center',
    fontSize: 16,
    color: '#666',
  },
  modalOverlay: { 
    flex: 1, 
    justifyContent: 'center', 
    alignItems: 'center', 
    backgroundColor: 'rgba(0,0,0,0.3)' 
  },
  modalContent: { 
    backgroundColor: '#fff', 
    width: '80%', 
    padding: 20, 
    borderRadius: 12, 
    elevation: 10, 
    alignItems: 'center' 
  },
  modalTitle: { 
    fontWeight: 'bold', 
    fontSize: 16, 
    marginBottom: 12, 
    textAlign: 'center' 
  },
  option: { 
    paddingVertical: 12, 
    fontSize: 16, 
    color: '#009688', 
    fontWeight: 'bold' 
  },
  backButton: { 
    marginTop: 20, 
    paddingVertical: 10, 
    width: '100%', 
    alignItems: 'center', 
    borderTopColor: '#ccc', 
    borderTopWidth: 1 
  },
  questionSeparator: {
    marginBottom: 16, // ✅ Adds space between questions
    paddingBottom: 12, // ✅ Adds space inside each question box
    borderBottomWidth: 1, // ✅ Creates a separator line
    borderBottomColor: '#ccc', // ✅ Light grey separator for better readability
  },
  answerHighlight: {
    color: '#009688', // ✅ Makes answer text match the plus button color
    fontWeight: 'bold', // ✅ Enhances visibility
  },  
});

--------
app/(tabs)/short-text.jsx

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Modal } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext';

export default function ShortTextScreen() {

  const [errorMessage, setErrorMessage] = useState('');
  const [errorVisible, setErrorVisible] = useState(false);

  const { quizName, questionId } = useLocalSearchParams();
  const { quizQuestions, updateQuestion, addQuestion } = useQuiz();
  const router = useRouter();

  const questionData = quizQuestions[quizName]?.find(q => q.id === parseInt(questionId)) || {};

  const [question, setQuestion] = useState(questionData.question || '');
  const [answerContains, setAnswerContains] = useState(questionData.answerContains || '');
  const [answerEquals, setAnswerEquals] = useState(questionData.answerEquals || '');

  const handleSave = () => {
    if (!question.trim()) {
      setErrorMessage("Question can't be blank");
      setErrorVisible(true);
      return;
    }
  
    // ✅ Ensure only one answer type is stored
    let updatedAnswerContains = answerContains.trim();
    let updatedAnswerEquals = answerEquals.trim();
  
    if (updatedAnswerContains) {
      updatedAnswerEquals = ''; // ✅ Clear "Equals" when "Contains" is used
    } else if (updatedAnswerEquals) {
      updatedAnswerContains = ''; // ✅ Clear "Contains" when "Equals" is used
    }
  
    if (questionId) {
      // ✅ If question exists, update it
      updateQuestion(
        quizName, 
        questionId, 
        question, 
        '', // ✅ Multiple Choice fields stay empty
        [], 
        answerContains?.toString().trim() || '', 
        answerEquals?.toString().trim() || ''
      );      
    } else {
      // ✅ Otherwise, create a new question
      addQuestion(quizName, {
        id: Date.now(),
        type: 'short-text',
        question,
        answerContains: updatedAnswerContains,
        answerEquals: updatedAnswerEquals
      });
    }
  
    router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } });
  };  

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } })}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Short Text</Text>
        <TouchableOpacity onPress={handleSave}>
          <Ionicons name="save" size={24} color="#009688" />
        </TouchableOpacity>
      </View>

      {/* Question Input */}
      <Text style={styles.label}>Question</Text>
      <TextInput
        style={styles.input}
        value={question}
        onChangeText={setQuestion}
        placeholder="Enter question"
      />

      {/* Answer Contains */}
      <Text style={styles.label}>Correct if the answer contains</Text>
      <View style={styles.answerRow}>
        <TextInput
          style={styles.input}
          value={answerContains}
          onChangeText={setAnswerContains}
          placeholder="Enter accepted words"
        />
        <Ionicons name="checkmark-circle-outline" size={24} color="purple" />
      </View>

      {/* Answer Equals */}
      <Text style={styles.label}>Correct if the answer is equal to</Text>
      <View style={styles.answerRow}>
        <TextInput
          style={styles.input}
          value={answerEquals}
          onChangeText={setAnswerEquals}
          placeholder="Enter exact answer"
        />
        <Ionicons name="checkmark-circle" size={24} color="green" />
      </View>

      {/* Modal for Validation */}
      <Modal visible={errorVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Validation Error</Text>
            <Text style={styles.modalText}>{errorMessage}</Text>
            <TouchableOpacity onPress={() => setErrorVisible(false)} style={styles.modalButton}>
              <Text style={styles.modalButtonText}>OK</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', padding: 20 },
  header: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 20 },
  headerTitle: { fontSize: 18, fontWeight: 'bold' },
  label: { fontSize: 16, marginBottom: 8 },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 6, padding: 10, flex: 1 },
  answerRow: { flexDirection: 'row', alignItems: 'center', marginBottom: 12 },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  modalContent: {
    backgroundColor: '#fff',
    width: '80%',
    padding: 20,
    borderRadius: 12,
    elevation: 10,
    alignItems: 'center',
  },
  modalTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 8,
  },
  modalText: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
    marginBottom: 12,
  },
  modalButton: {
    backgroundColor: '#009688',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 6,
  },
  modalButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },  
});

-------
app/(tabs)/top-tabs.jsx

import { useState } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import ExamContent from '../components/ExamContent';
import QuizzesContent from '../components/QuizzesContent';
import { Ionicons } from '@expo/vector-icons';
import { StatusBar } from 'react-native';
import { useQuiz } from '../../context/QuizContext';

export default function TopTabsScreen() {
  const [activeTab, setActiveTab] = useState('exam');
  const { quizzes, setQuizzes } = useQuiz(); // 💾 This keeps your quizzes alive even when switching tabs

  const renderHeaderRight = () => {
    if (activeTab === 'exam') {
      return (
        <TouchableOpacity>
          <Ionicons name="settings-outline" size={24} color="white" />
        </TouchableOpacity>
      );
    } else {
      return (
        <View style={{ flexDirection: 'row' }}>
          <Ionicons name="search" size={24} color="white" style={{ marginRight: 16 }} />
          <Ionicons name="ellipsis-vertical" size={24} color="white" />
        </View>
      );
    }
  };

  const renderScreen = () => {
    if (activeTab === 'exam') return <ExamContent />;
    if (activeTab === 'quizzes') return <QuizzesContent quizzes={quizzes} setQuizzes={setQuizzes} />;
  };

  return (
    <View style={{ flex: 1 }}>
      <StatusBar barStyle="light-content" />

      {/* Top Header */}
      <View style={{
        backgroundColor: '#009688',
        paddingTop: 50,
        paddingBottom: 10,
        paddingHorizontal: 20,
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
      }}>
        <Text style={{ color: 'white', fontSize: 22, fontWeight: 'bold' }}>Quizzer</Text>
        {renderHeaderRight()}
      </View>

      {/* Tab Bar */}
      <View style={{
        flexDirection: 'row',
        justifyContent: 'space-around',
        borderBottomColor: '#ccc',
        borderBottomWidth: 1,
      }}>
        <TouchableOpacity onPress={() => setActiveTab('exam')}>
          <Text style={{
            padding: 10,
            fontWeight: 'bold',
            color: activeTab === 'exam' ? '#009688' : '#666',
            borderBottomWidth: activeTab === 'exam' ? 2 : 0,
            borderBottomColor: '#009688'
          }}>
            EXAM
          </Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => setActiveTab('quizzes')}>
          <Text style={{
            padding: 10,
            fontWeight: 'bold',
            color: activeTab === 'quizzes' ? '#009688' : '#666',
            borderBottomWidth: activeTab === 'quizzes' ? 2 : 0,
            borderBottomColor: '#009688'
          }}>
            QUIZZES
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      {renderScreen()}
    </View>
  );
}

------
app/(tabs)/true-false.jsx

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Modal } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext';

export default function TrueFalseScreen() {

  const [errorMessage, setErrorMessage] = useState('');
  const [errorVisible, setErrorVisible] = useState(false);

  const { quizName, questionId } = useLocalSearchParams();
  const { quizQuestions, updateQuestion, addQuestion } = useQuiz();
  const router = useRouter();

  const questionData = quizQuestions[quizName]?.find(q => q.id === parseInt(questionId)) || {};

  const [question, setQuestion] = useState(questionData.question || '');
  const [selectedAnswer, setSelectedAnswer] = useState(questionData.correctAnswer || null);

  const handleSave = () => {
    if (!question.trim()) {
      setErrorMessage("Question can't be blank");
      setErrorVisible(true);
      return;
    }
  
    if (selectedAnswer === null) {
      setErrorMessage("Please select an answer");
      setErrorVisible(true);
      return;
    }
  
    if (questionId) {
      // ✅ If question exists, update it
      updateQuestion(
        quizName, 
        questionId, 
        question.trim(), 
        selectedAnswer.toString().trim(), 
        [], // ✅ Ensure wrongAnswers remains empty
        '', // ✅ Ensure answerContains remains empty
        ''  // ✅ Ensure answerEquals remains empty
      );      
    } else {
      // ✅ Otherwise, create a new question
      addQuestion(quizName, {
        id: Date.now(),
        type: 'true-false',
        question: question.trim(),
        correctAnswer: selectedAnswer.toString().trim(),
        wrongAnswers: [], 
        answerContains: '', 
        answerEquals: ''
      });
    }    
  
    router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } });
  };  

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.push({ pathname: '/(tabs)/quiz-screen', params: { name: quizName } })}>
          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>True or False</Text>
        <TouchableOpacity onPress={handleSave}>
          <Ionicons name="save" size={24} color="#009688" />
        </TouchableOpacity>
      </View>

      {/* Question Input */}
      <Text style={styles.label}>Question</Text>
      <TextInput
        style={styles.input}
        value={question}
        onChangeText={setQuestion}
        placeholder="Enter question"
      />

      {/* Answer Selection */}
      <View style={styles.answerContainer}>
        <TouchableOpacity
          style={[styles.answerOption, selectedAnswer === true && styles.selected]}
          onPress={() => setSelectedAnswer(true)}
        >
          <Text style={styles.answerText}>True</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.answerOption, selectedAnswer === false && styles.selected]}
          onPress={() => setSelectedAnswer(false)}
        >
          <Text style={styles.answerText}>False</Text>
        </TouchableOpacity>
      </View>

      {/* Modal for Validation */}
      <Modal visible={errorVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Validation Error</Text>
            <Text style={styles.modalText}>{errorMessage}</Text>
            <TouchableOpacity onPress={() => setErrorVisible(false)} style={styles.modalButton}>
              <Text style={styles.modalButtonText}>OK</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff', padding: 20 },
  header: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 20 },
  headerTitle: { fontSize: 18, fontWeight: 'bold' },
  label: { fontSize: 16, marginBottom: 8 },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 6, padding: 10, marginBottom: 16 },
  answerContainer: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 20 },
  answerOption: { paddingVertical: 12, paddingHorizontal: 20, borderWidth: 1, borderColor: '#ccc', borderRadius: 6 },
  answerText: { fontSize: 16 },
  selected: { backgroundColor: '#009688', borderColor: '#009688', color: 'white' },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  modalContent: {
    backgroundColor: '#fff',
    width: '80%',
    padding: 20,
    borderRadius: 12,
    elevation: 10,
    alignItems: 'center',
  },
  modalTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 8,
  },
  modalText: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
    marginBottom: 12,
  },
  modalButton: {
    backgroundColor: '#009688',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 6,
  },
  modalButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },  
});

--------
app/components/ExamComponent.jsx

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function ExamContent() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>This is the Exam screen!</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  text: {
    fontSize: 18,
    color: '#333',
  },
});

--------
app/components/QuizzesContent.jsx

import React, { useState } from 'react';
import {
  View,
  Text,
  FlatList,
  Modal,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { useQuiz } from '../../context/QuizContext'; 

export default function QuizzesContent() {
  const { quizzes, setQuizzes, quizQuestions } = useQuiz(); // ✅ Includes quizQuestions  
  const [modalVisible, setModalVisible] = useState(false);
  const [quizName, setQuizName] = useState('');
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [selectedQuiz, setSelectedQuiz] = useState(null);
  const [actionModalVisible, setActionModalVisible] = useState(false);
  const [confirmDeleteModalVisible, setConfirmDeleteModalVisible] = useState(false);

  const router = useRouter();

  const handleSaveQuiz = () => {
    if (quizName.trim() !== '') {
      const newList = [...quizzes, quizName.trim()].sort();
      setQuizzes(newList);
      setQuizName('');
      setModalVisible(false);
    }
  };

  const handleCancel = () => {
    setQuizName('');
    setModalVisible(false);
  };

  const handleDeleteQuiz = () => {
    const updatedList = quizzes.filter((quiz) => quiz !== selectedQuiz);
    setQuizzes(updatedList);
    setConfirmDeleteModalVisible(false);
    setActionModalVisible(false);
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={quizzes}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => router.push({ pathname: '/(tabs)/quiz-screen', params: { name: item } })}
            onLongPress={() => {
              setSelectedQuiz(item);
              setActionModalVisible(true);
            }}
          >
            <View style={styles.quizItem}>
              <Text style={styles.quizTitle}>{item}</Text>
              <Text style={styles.questionCount}>
                {quizQuestions[item]?.length || 0} questions
              </Text>
            </View>
          </TouchableOpacity>
        )}
        contentContainerStyle={{ paddingBottom: 100 }}
      />

      {/* FAB */}
      <TouchableOpacity style={styles.fab} onPress={() => setModalVisible(true)}>
        <Ionicons name="add" size={28} color="white" />
      </TouchableOpacity>

      {/* Add Quiz Modal */}
      <Modal
        visible={modalVisible}
        transparent
        animationType="fade"
        onRequestClose={handleCancel}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Quiz name</Text>
            <TextInput
              placeholder="Enter quiz name"
              value={quizName}
              onChangeText={setQuizName}
              style={styles.input}
            />
            <View style={styles.modalButtons}>
              <TouchableOpacity onPress={handleCancel}>
                <Text style={styles.cancel}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={handleSaveQuiz}>
                <Text style={styles.save}>Save</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Action Modal */}
      <Modal
        visible={actionModalVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setActionModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.actionModalContent}>
            <Text style={[styles.modalTitle]}>{selectedQuiz}</Text>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => {
                setActionModalVisible(false);
                router.push({ pathname: '/(tabs)/edit-quiz', params: { name: selectedQuiz } });
              }}
            >
              <Text style={styles.save}>Edit</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => {
                setConfirmDeleteModalVisible(true);
              }}
            >
              <Text style={{ color: 'red' }}>Delete</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => setActionModalVisible(false)}>
              <Text style={[styles.cancel, {marginRight: 0, paddingVertical: 10,}]}>Back</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Confirm Delete Modal */}
      <Modal
        visible={confirmDeleteModalVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setConfirmDeleteModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Delete quiz?</Text>
            <Text>{selectedQuiz}</Text>
            <View style={styles.modalButtons}>
              <TouchableOpacity onPress={() => setConfirmDeleteModalVisible(false)}>
                <Text style={styles.cancel}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={handleDeleteQuiz}>
                <Text style={[styles.save, { color: 'red' }]}>Delete</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  quizItem: {
    padding: 16,
    borderBottomColor: '#eee',
    borderBottomWidth: 1,
  },
  fab: {
    position: 'absolute',
    bottom: 25,
    right: 25,
    backgroundColor: '#009688',
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.3)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    width: '80%',
    padding: 20,
    borderRadius: 12,
    elevation: 10,
  },
  actionModalContent: {
    backgroundColor: '#fff',
    width: '70%',
    padding: 20,
    borderRadius: 12,
    elevation: 10,
    alignItems: 'center',
  },
  modalTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 12,
    textAlign: 'center',
    justifyContent: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 6,
    marginBottom: 16,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 10,
  },
  cancel: {
    marginRight: 20,
    color: '#888',
    fontWeight: 'bold',
  },
  save: {
    color: '#009688',
    fontWeight: 'bold',
  },
  actionButton: {
    paddingVertical: 10,
  },
});

----------
app/components/SettingItem.jsx

import { View, Text, StyleSheet } from 'react-native';

export default function SettingItem({ title, children }) {
  return (
    <View style={styles.item}>
      <Text style={styles.title}>{title}</Text>
      <View>{children}</View>
    </View>
  );
}

const styles = StyleSheet.create({
  item: {
    padding: 16,
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,
  },
  title: {
    fontWeight: 'bold',
    marginBottom: 8,
  },
});

-----------
app/components/ToggleSetting.jsx

import React from 'react';
import { View, Text, Switch } from 'react-native';
import { colors } from '../../styles/colors';

export default function ToggleSetting({ label, value, onValueChange }) {
  return (
    <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginVertical: 10 }}>
      <Text style={{ fontWeight: 'bold' }}>{label}</Text>
      <Switch value={value} onValueChange={onValueChange} thumbColor={colors.primary} />
    </View>
  );
}

---------
app/index.jsx

import { Redirect } from 'expo-router';

export default function Index() {
  return <Redirect href="/(tabs)/top-tabs" />;
}

----------
context/QuizContext.jsx

import React, { createContext, useState, useContext } from 'react';

const QuizContext = createContext();

export const QuizProvider = ({ children }) => {
  const [quizzes, setQuizzes] = useState([]);
  const [quizQuestions, setQuizQuestions] = useState({}); // 💾 Stores questions per quiz

  const updateQuiz = (oldName, newName) => {
    setQuizzes(prevQuizzes =>
      prevQuizzes.map(quiz => quiz === oldName ? newName : quiz)
    );
  
    setQuizQuestions(prev => {
      const updatedQuestions = { ...prev };
      updatedQuestions[newName] = updatedQuestions[oldName] || []; // ✅ Move questions to new quiz name
      delete updatedQuestions[oldName]; // ✅ Remove old quiz name from storage
      return updatedQuestions;
    });
  };  

  const addQuestion = (quizName, question) => {
    setQuizQuestions(prev => ({
      ...prev,
      [quizName]: [...(prev[quizName] || []), question] // ✅ Adds question to list
    }));
  };

  const updateQuestion = (quizName, questionId, newQuestion, correctAnswer, wrongAnswers, answerContains, answerEquals) => {
    setQuizQuestions(prev => ({
      ...prev,
      [quizName]: prev[quizName]?.map(q =>
        q.id == questionId 
          ? { 
              ...q, 
              question: newQuestion, 
              correctAnswer: typeof correctAnswer === 'string' ? correctAnswer.trim() : q.correctAnswer, 
              wrongAnswers: Array.isArray(wrongAnswers) ? wrongAnswers.map(ans => ans.trim()) : q.wrongAnswers, 
              answerContains: typeof answerContains === 'string' ? answerContains.trim() : q.answerContains, 
              answerEquals: typeof answerEquals === 'string' ? answerEquals.trim() : q.answerEquals
            }
          : q
      ) || []      
    }));
  };       

  return (
    <QuizContext.Provider value={{ quizzes, setQuizzes, quizQuestions, setQuizQuestions, addQuestion, updateQuiz, updateQuestion }}>
      {children}
    </QuizContext.Provider>
  );
};

export const useQuiz = () => useContext(QuizContext);

---------
styles/colors.js

export const colors = {
  primary: '#009688',   // Teal-ish color (same vibe as in your screenshot)
  secondary: '#4CAF50', // Green
  accent: '#FFC107',    // Yellow
  text: '#212121',
  background: '#FFFFFF',
};

-------------

This is the currect file structure and its code.